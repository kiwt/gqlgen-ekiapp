// Package models contains the types for schema 'ekiapp'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Company represents a row from 'ekiapp.company'.
type Company struct {
	CompanyCd    int            `json:"company_cd"`     // company_cd
	RrCd         int            `json:"rr_cd"`          // rr_cd
	CompanyName  string         `json:"company_name"`   // company_name
	CompanyNameK sql.NullString `json:"company_name_k"` // company_name_k
	CompanyNameH sql.NullString `json:"company_name_h"` // company_name_h
	CompanyNameR sql.NullString `json:"company_name_r"` // company_name_r
	CompanyURL   sql.NullString `json:"company_url"`    // company_url
	CompanyType  sql.NullInt64  `json:"company_type"`   // company_type
	EStatus      sql.NullInt64  `json:"e_status"`       // e_status
	ESort        sql.NullInt64  `json:"e_sort"`         // e_sort

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Company exists in the database.
func (c *Company) Exists() bool {
	return c._exists
}

// Deleted provides information if the Company has been deleted from the database.
func (c *Company) Deleted() bool {
	return c._deleted
}

// Insert inserts the Company to the database.
func (c *Company) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO ekiapp.company (` +
		`company_cd, rr_cd, company_name, company_name_k, company_name_h, company_name_r, company_url, company_type, e_status, e_sort` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.CompanyCd, c.RrCd, c.CompanyName, c.CompanyNameK, c.CompanyNameH, c.CompanyNameR, c.CompanyURL, c.CompanyType, c.EStatus, c.ESort)
	_, err = db.Exec(sqlstr, c.CompanyCd, c.RrCd, c.CompanyName, c.CompanyNameK, c.CompanyNameH, c.CompanyNameR, c.CompanyURL, c.CompanyType, c.EStatus, c.ESort)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Company in the database.
func (c *Company) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ekiapp.company SET ` +
		`rr_cd = ?, company_name = ?, company_name_k = ?, company_name_h = ?, company_name_r = ?, company_url = ?, company_type = ?, e_status = ?, e_sort = ?` +
		` WHERE company_cd = ?`

	// run query
	XOLog(sqlstr, c.RrCd, c.CompanyName, c.CompanyNameK, c.CompanyNameH, c.CompanyNameR, c.CompanyURL, c.CompanyType, c.EStatus, c.ESort, c.CompanyCd)
	_, err = db.Exec(sqlstr, c.RrCd, c.CompanyName, c.CompanyNameK, c.CompanyNameH, c.CompanyNameR, c.CompanyURL, c.CompanyType, c.EStatus, c.ESort, c.CompanyCd)
	return err
}

// Save saves the Company to the database.
func (c *Company) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Company from the database.
func (c *Company) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ekiapp.company WHERE company_cd = ?`

	// run query
	XOLog(sqlstr, c.CompanyCd)
	_, err = db.Exec(sqlstr, c.CompanyCd)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CompanyByCompanyCd retrieves a row from 'ekiapp.company' as a Company.
//
// Generated from index 'company_company_cd_pkey'.
func CompanyByCompanyCd(db XODB, companyCd int) (*Company, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`company_cd, rr_cd, company_name, company_name_k, company_name_h, company_name_r, company_url, company_type, e_status, e_sort ` +
		`FROM ekiapp.company ` +
		`WHERE company_cd = ?`

	// run query
	XOLog(sqlstr, companyCd)
	c := Company{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, companyCd).Scan(&c.CompanyCd, &c.RrCd, &c.CompanyName, &c.CompanyNameK, &c.CompanyNameH, &c.CompanyNameR, &c.CompanyURL, &c.CompanyType, &c.EStatus, &c.ESort)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
