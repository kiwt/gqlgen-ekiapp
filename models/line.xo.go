// Package models contains the types for schema 'ekiapp'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Line represents a row from 'ekiapp.line'.
type Line struct {
	LineCd     int             `json:"line_cd"`      // line_cd
	CompanyCd  int             `json:"company_cd"`   // company_cd
	LineName   string          `json:"line_name"`    // line_name
	LineNameK  sql.NullString  `json:"line_name_k"`  // line_name_k
	LineNameH  sql.NullString  `json:"line_name_h"`  // line_name_h
	LineColorC sql.NullString  `json:"line_color_c"` // line_color_c
	LineColorT sql.NullString  `json:"line_color_t"` // line_color_t
	LineType   sql.NullInt64   `json:"line_type"`    // line_type
	Lon        sql.NullFloat64 `json:"lon"`          // lon
	Lat        sql.NullFloat64 `json:"lat"`          // lat
	Zoom       sql.NullInt64   `json:"zoom"`         // zoom
	EStatus    sql.NullInt64   `json:"e_status"`     // e_status
	ESort      sql.NullInt64   `json:"e_sort"`       // e_sort

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Line exists in the database.
func (l *Line) Exists() bool {
	return l._exists
}

// Deleted provides information if the Line has been deleted from the database.
func (l *Line) Deleted() bool {
	return l._deleted
}

// Insert inserts the Line to the database.
func (l *Line) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO ekiapp.line (` +
		`line_cd, company_cd, line_name, line_name_k, line_name_h, line_color_c, line_color_t, line_type, lon, lat, zoom, e_status, e_sort` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, l.LineCd, l.CompanyCd, l.LineName, l.LineNameK, l.LineNameH, l.LineColorC, l.LineColorT, l.LineType, l.Lon, l.Lat, l.Zoom, l.EStatus, l.ESort)
	_, err = db.Exec(sqlstr, l.LineCd, l.CompanyCd, l.LineName, l.LineNameK, l.LineNameH, l.LineColorC, l.LineColorT, l.LineType, l.Lon, l.Lat, l.Zoom, l.EStatus, l.ESort)
	if err != nil {
		return err
	}

	// set existence
	l._exists = true

	return nil
}

// Update updates the Line in the database.
func (l *Line) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if l._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ekiapp.line SET ` +
		`company_cd = ?, line_name = ?, line_name_k = ?, line_name_h = ?, line_color_c = ?, line_color_t = ?, line_type = ?, lon = ?, lat = ?, zoom = ?, e_status = ?, e_sort = ?` +
		` WHERE line_cd = ?`

	// run query
	XOLog(sqlstr, l.CompanyCd, l.LineName, l.LineNameK, l.LineNameH, l.LineColorC, l.LineColorT, l.LineType, l.Lon, l.Lat, l.Zoom, l.EStatus, l.ESort, l.LineCd)
	_, err = db.Exec(sqlstr, l.CompanyCd, l.LineName, l.LineNameK, l.LineNameH, l.LineColorC, l.LineColorT, l.LineType, l.Lon, l.Lat, l.Zoom, l.EStatus, l.ESort, l.LineCd)
	return err
}

// Save saves the Line to the database.
func (l *Line) Save(db XODB) error {
	if l.Exists() {
		return l.Update(db)
	}

	return l.Insert(db)
}

// Delete deletes the Line from the database.
func (l *Line) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return nil
	}

	// if deleted, bail
	if l._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ekiapp.line WHERE line_cd = ?`

	// run query
	XOLog(sqlstr, l.LineCd)
	_, err = db.Exec(sqlstr, l.LineCd)
	if err != nil {
		return err
	}

	// set deleted
	l._deleted = true

	return nil
}

// LineByLineCd retrieves a row from 'ekiapp.line' as a Line.
//
// Generated from index 'line_line_cd_pkey'.
func LineByLineCd(db XODB, lineCd int) (*Line, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`line_cd, company_cd, line_name, line_name_k, line_name_h, line_color_c, line_color_t, line_type, lon, lat, zoom, e_status, e_sort ` +
		`FROM ekiapp.line ` +
		`WHERE line_cd = ?`

	// run query
	XOLog(sqlstr, lineCd)
	l := Line{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, lineCd).Scan(&l.LineCd, &l.CompanyCd, &l.LineName, &l.LineNameK, &l.LineNameH, &l.LineColorC, &l.LineColorT, &l.LineType, &l.Lon, &l.Lat, &l.Zoom, &l.EStatus, &l.ESort)
	if err != nil {
		return nil, err
	}

	return &l, nil
}
