// Package models contains the types for schema 'ekiapp'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// StationJoin represents a row from 'ekiapp.station_join'.
type StationJoin struct {
	LineCd     int `json:"line_cd"`     // line_cd
	StationCd1 int `json:"station_cd1"` // station_cd1
	StationCd2 int `json:"station_cd2"` // station_cd2

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the StationJoin exists in the database.
func (sj *StationJoin) Exists() bool {
	return sj._exists
}

// Deleted provides information if the StationJoin has been deleted from the database.
func (sj *StationJoin) Deleted() bool {
	return sj._deleted
}

// Insert inserts the StationJoin to the database.
func (sj *StationJoin) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sj._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO ekiapp.station_join (` +
		`line_cd, station_cd1, station_cd2` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, sj.LineCd, sj.StationCd1, sj.StationCd2)
	_, err = db.Exec(sqlstr, sj.LineCd, sj.StationCd1, sj.StationCd2)
	if err != nil {
		return err
	}

	// set existence
	sj._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the StationJoin from the database.
func (sj *StationJoin) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sj._exists {
		return nil
	}

	// if deleted, bail
	if sj._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM ekiapp.station_join WHERE line_cd = ? AND station_cd1 = ? AND station_cd2 = ?`

	// run query
	XOLog(sqlstr, sj.LineCd, sj.StationCd1, sj.StationCd2)
	_, err = db.Exec(sqlstr, sj.LineCd, sj.StationCd1, sj.StationCd2)
	if err != nil {
		return err
	}

	// set deleted
	sj._deleted = true

	return nil
}

// StationJoinByStationCd2 retrieves a row from 'ekiapp.station_join' as a StationJoin.
//
// Generated from index 'station_join_station_cd2_pkey'.
func StationJoinByStationCd2(db XODB, stationCd2 int) (*StationJoin, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`line_cd, station_cd1, station_cd2 ` +
		`FROM ekiapp.station_join ` +
		`WHERE station_cd2 = ?`

	// run query
	XOLog(sqlstr, stationCd2)
	sj := StationJoin{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, stationCd2).Scan(&sj.LineCd, &sj.StationCd1, &sj.StationCd2)
	if err != nil {
		return nil, err
	}

	return &sj, nil
}
